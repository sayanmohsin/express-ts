generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-1.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Users {
  user_id                String            @id @default(uuid())
  first_name             String
  middle_name            String?
  last_name              String?
  email                  String
  password               String
  phone                  String?
  photo_id               String?
  user_confirmed         Boolean?
  remaining_pdf_pm_count Int               @default(0)
  total_pdf_pm_count     Int               @default(0)
  created_at             DateTime?         @default(now())
  updated_at             DateTime?         @updatedAt
  city                   String?
  country                String?
  line1                  String?
  line2                  String?
  postal_code            String?
  state                  String?
  currency               String?
  status                 Boolean           @default(true)
  apis                   Apis[]
  support_messages       SupportMessages[]
  discounted             Boolean           @default(false)
  delete_on              DateTime?
  discount_end_on        DateTime?

  @@unique([email])
  @@index([email])
  @@map("users")
}

model Apis {
  api_service_id String    @id @default(uuid())
  api_key        String
  user           Users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id        String
  status         Boolean   @default(true)
  created_at     DateTime? @default(now())
  updated_at     DateTime? @updatedAt

  @@unique([api_key])
  @@index([api_key])
  @@map("apis")
}

model SupportMessages {
  support_messages_id String    @id @default(uuid())
  subject             String?
  message             String?
  user                Users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id             String
  status              Boolean   @default(true)
  created_at          DateTime? @default(now())
  updated_at          DateTime? @updatedAt

  @@map("support_messages")
}

model Stats {
  stat_id    String    @id @default(uuid())
  key        String
  value      String?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@unique([key])
  @@index([key])
  @@map("stats")
}

model Admins {
  admin_id   String    @id @default(uuid())
  name       String
  username   String
  password   String
  phone      String?
  photo_id   String?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  product_id String?

  @@unique([username])
  @@index([username])
  @@map("admins")
}
